Java's BitSet class implements a vector of bit values (i.e.:  () or  ()) that grows as needed, allowing us to easily manipulate bits while optimizing space (when compared to other collections).
Any element having a bit value of  is called a set bit.

Given  BitSets,  and , of size  where all bits in both BitSets are initialized to , 
perform a series of operations. After each operation, print the number of set bits in the 
respective BitSets as two space-separated integers on a new line.


import java.io.*;
import java.util.*;
import java.util.function.*;

public class Solution {

    public static void main(String[] args) {
         Scanner sc = new Scanner(System.in);
    int setSize = sc.nextInt();
    int noOps = sc.nextInt();
    BitSet[] bitSets = new BitSet[]{new BitSet(setSize), new BitSet(setSize)};
    Map<String, BiConsumer<Integer,Integer>> ops = new HashMap<>();
    ops.put("AND", (index1, index2) -> bitSets[index1-1].and(bitSets[index2-1]));
    ops.put("OR", (index1, index2) -> bitSets[index1-1].or(bitSets[index2-1]));
    ops.put("XOR", (index1, index2) -> bitSets[index1-1].xor(bitSets[index2-1]));
    ops.put("SET", (index1, index2) -> bitSets[index1-1].set(index2));
    ops.put("FLIP", (index1, index2) -> bitSets[index1-1].flip(index2));
    for (int i = 0; i < noOps; i++){
        ops.get(sc.next()).accept(sc.nextInt(), sc.nextInt());    
        System.out.println(bitSets[0].cardinality() + " " + bitSets[1].cardinality());
    }
    }
}
